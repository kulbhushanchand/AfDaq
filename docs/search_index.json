[["index.html", "AfDaq documentation Preface Developer Links License Citation", " AfDaq documentation Kulbhushan Chand 2021-05-06 Preface Arduino Firmata Data Acquisition (AfDaq) A plug and play MATLAB based tool for biofeedback and Arduino based instruments Developer Kulbhushan Chand Ph.D. Research Scholar Emerging Technologies Lab Department of Electronics and Communication Engineering Dr B R Ambedkar National Institute of Technology Jalandhar, India Links This project is open data, open code, and replicable research. The code is available at GitHub repository. Browse source code at https://github.com/kulbhushanchand/AfDaq Download from release page at https://github.com/kulbhushanchand/AfDaq/releases Report a bug at https://github.com/kulbhushanchand/AfDaq/issues In case you are interested in the research, design, and development of this software, the code, data, and analysis scripts that support the findings of the study are available at OSF Repository. License This project is distributed under the GPLv3 License. See LICENSE for more information. Citation This software code is a part of the open-source project AfDaq: An Open-source MATLAB-based Real-time Multi-channel Data Acquisition Tool for Biofeedback and Arduino-based Instruments. The paper explaining the design and development, and usage of this work in multimodal biofeedback is published in Journal of Information Technology Research (JITR). You can cite this work (by citing the paper published for this work) as - citation "],["intro.html", "Chapter 1 Introduction 1.1 About the project 1.2 Built with 1.3 Features 1.4 Why another acquisition program?", " Chapter 1 Introduction 1.1 About the project Figure 1.1: GUI of AfDaq AfDaq (Arduino Firmata Data Acquisition) is an open-source plug-and-play MATLAB-based tool for biofeedback and Arduino-based instruments, which offers the capabilities of multi-channel real-time data acquisition, visualization, manipulation, and local saving of data for offline analysis. The researchers (especially from biofeedback or physiological measurement domain) or hobbyist, who are using MATLAB and want to acquire data from Arduino or to control Arduino-based instruments can use this tool. 1.2 Built with This GUI tool is built using the Guide tool in MATLAB-v2017b. For the hardware, any Arduino compatible board can be used which is supported by MATLAB. 1.3 Features Plug and play system (no need to separately upload any code on Arduino board). Real-time multi-channel data acquisition from supported digital or analog channels. Sampling rate of - 10 Hz when using all 5 channels simultaneously 40 Hz when using single-channel acquisition. Real-time data visualization (in scroll plot) and data manipulation (with custom functions). Local saving of data in .xlsx format for offline analysis. Screenshot of current GUI for reference purpose. 1.4 Why another acquisition program? Researchers in the biofeedback domain or working on Arduino-based instruments often require a quick-to-deploy system to acquire real-time data from Arduino and for further analysis transfer the data in MATLAB. For this, MATLAB has provided MATLAB Support Package for Arduino Hardware which eases the data acquisition need from Arduino compatible hardware by automatically updating firmata code on Arduino board and providing functions for data acquisition. However, at present, its use in physiological research is limited due to severe timing jitter associated with data acquisition. This software tool aims to reduce the timing jitter and provides precise time stamps during data acquisition. "],["getting-started.html", "Chapter 2 Getting Started 2.1 Prerequisites 2.2 Installation and Running 2.3 GUI", " Chapter 2 Getting Started Working with AfDaq is a straightforward process. Make sure you have prerequisites available and follow the steps below. 2.1 Prerequisites MATLAB MATLAB-ver2017b was used to develop the AfDaq. It was also tested with ver2015b and ver2018b for backward and forward compatibility respectively. It may not work with ver20xx and before due to the unavailability of compatible MATLAB Support Package for Arduino Hardware. MATLAB Support Package for Arduino Hardware Arduino compatible hardware board. For the list of the supported boards, visit documentation here. 2.2 Installation and Running Download the latest stable release and extract contents into your MATLAB working directory. Alternatively, you can also download the latest code from the repository. Open AfDaq.m in MATLAB. Connect Arduino board to PC with USB cable. If the board is pre-configured with Firmata code by MATLAB, a message is shown in the command window. Run AfDaq.m and wait for the GUI to appear. In the GUI select the COM port for the Arduino and press the Connect button. If the Arduino is not pre-configured with Firmata code by MATLAB, it may take few minutes (Its a one-time process in the beginning OR if the board is re-flashed outside). After a successful connection, appropriate settings can be selected and acquisition is manually started. The acquisition runs till a set time or can be stopped manually. After successful completion, the information panel shows various statistics related to the acquisition. Data can be saved for offline processing. 2.3 GUI Figure 2.1: GUI of AfDaq. Various sub-components (Settings, Plot, Information, and Control) are labelled. Minimum interaction steps to use are numbered 1 to 4. The user interface is straightforward and easy to use. The various sub-components are arranged in panels as per their functionality. The main sub-components of the GUI and their functions are : Settings Arduino: Lists the available COM ports. Establishes a connection to the Arduino. Settings: Lists various settings with defaults. Up to 5 channels can be selected. Display: Controls the scaling of the live plot. Information Status: Panel showing the current status of the GUI. Daq Information: Panel for important information regarding the current session. Results: Panel to display the results after the successful acquisition. Plot Live plot: Panel displaying a real-time plot of the acquired data. Control Control: Panel to control the state of the GUI and data logging. Figure 2.1 shows the minimum number of steps (labeled from 1 to 4) required for a simple data acquisition session. However, the number of steps may increase depending upon the users preference. Following is a brief explanation for each of these steps. Select the COM port from the list to which the Arduino board is connected. Connect to the board. Select at least one channel from the drop-down list. Start the acquisition. You can pre-maturely stop the acquisition using the Start/Stop button at will or let it finish by itself till the session duration. "],["structure.html", "Chapter 3 Structure 3.1 Directory structure 3.2 Dependencies", " Chapter 3 Structure 3.1 Directory structure The main directory structure (with files) is shown below. .  .gitignore  AcqRunningGuiFormat.m  AcqStoppedGuiFormat.m  AfDaq.fig  AfDaq.m  Arduino.m  CalculateResults.m  CODE_OF_CONDUCT.md  DefaultSettings.m  Help.fig  Help.m  InitializeGui.m  InitializeVariables.m  LICENSE  LogDataTemplate.xlsx  NumberOfActiveChannels.m  README.md  scratchpad.m  Analysis  jitter_calculation.m  docs  docs_source  LoggedData 20200618151224Sub1.xlsx An overview of what each of these does is described in the following tables. Table 3.1: Description of core files/folders FILE / DIRECTORY DESCRIPTION AcqRunningGuiFormat.m Function file that defines the state of the GUI when data acquisition is running. AcqStoppedGuiFormat.m Function file that defines the state of the GUI when data acquisition is stopped. AfDaq.fig Design file that holds the layout of the GUI. It is created by GUIDE. It is required if further changes to GUI are needed. It is programmatically created by GUIDE and should not be modified outside the GUIDE environment. The AfDaq can be started by opening this file. AfDaq.m Function file that holds the callback functions and/or the user-defined functions which define the logic to interact with GUI. It is programmatically created by GUIDE during the first run and later modified by GUIDE as per changes in AfDaq.fig. The AfDaq can be started by executing this file from the editor window. Arduino.m Function file that defines the logic to connect with the Arduino board. CalculateResults.m Function file that calculates the final results like recorded session duration, sampling frequency, number of samples, and data quality. DefaultSettings.m Function file to hold the default settings of the GUI. Help.fig Design file that holds the layout of the help GUI. Help.m Function file that holds the callback functions of the help GUI. InitializeGui.m Function file that initializes the GUI to a default state. InitializeVariables.m Function file that initializes variable to their default state. LogDataTemplate.xlsx Excel file that is used as a template to fill data during logging. NumberOfActiveChannels.m Function file to compute the number of active channels used for data acquisition. Table 3.2: Description of optional files/folders FILE / DIRECTORY DESCRIPTION .gitignore File used by git to ignore specific files/folders from version control. CODE_OF_CONDUCT.md File defining the code of conduct for contributions. LICENSE File defining the terms and conditions of license for this project. README.md File defining a short introduction to the project. scratchpad.m File used as temporary code storage/testing. Analysis/jitter_calculation.m Function file used to compute and analyze the jitter associated with the data acquisition. docs/ Documentation folder docs_source/ Source of documentation. The bookdown package in R is used to create the documentation. LoggedData Folder where data is saved during logging. If not exists, this folder is automatically created during the logging process. LoggedData/20200618151224Sub1.xlsx File with logged data provided for example purpose. 3.2 Dependencies Here discussed what functions and scripts AfDaq is dependent upon. The [fList,pList] = matlab.codetools.requiredFilesAndProducts('AfDaq.fig'); function is used to generate the list of dependencies. List of MathWorks products possibly required MATLAB - ver.9.3 Control System Toolbox - ver.10.3 Data Acquisition Toolbox - ver.3.12 Instrument Control Toolbox - ver.3.12 List of user-authored MATLAB program files required &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\ArduinoConstants.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\BaseClass.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\BluetoothDeviceTypeEnum.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\BluetoothHostTransportLayer.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\BoardInfo.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\ConnectionTypeEnum.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\LinuxUtility.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\MWProtocol.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\MacUtility.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\ProtocolBase.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\ResourceManager.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\SerialHostTransportLayer.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\TCPHostTransportLayer.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\TabCompletionHelper.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\TransportLayerBase.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\Utility.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\UtilityCreator.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\WiFiEncryptionTypeEnum.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\WiFiStatusEnum.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\WindowsUtility.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\encode.p&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\endsWith.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\getDefaultLibraryPropertyValue.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\getFullLibraryList.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\getLibraryClassName.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\isICTInstalled.p&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\localizedError.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\renderArrayOfIntsToCharVector.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\renderCellArrayOfCharVectorsToCharVector.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\searchDefaultPropertyValue.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\validateDigitalParameter.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\validateDoubleParameterRanged.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\validateInputPin.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\validateIntArrayParameterRanged.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+internal\\validateIntParameterRanged.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\+setup\\+internal\\HardwareInterface.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\AddonBase.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\FilePath.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\IDERoot.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\LibraryBase.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\PackageRoot.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\SPPKGRoot.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\Servo.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\ServoMotorBase.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\i2cdev.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\rotaryEncoder.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\shiftRegister.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\+arduinoio\\spidev.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\@arduino\\arduino.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\matlab\\hardware\\supportpackages\\arduinoio\\listArduinoLibraries.m&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\realtime\\targets\\arduinoide\\+ide\\+internal\\getArduinoIDERootDir.p&#39; &#39;C:\\ProgramData\\MATLAB\\SupportPackages\\R2017b\\toolbox\\realtime\\targets\\arduinoide\\+ide\\+internal\\getArduinoSAMRootDir.p&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\AcqRunningGuiFormat.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\AcqStoppedGuiFormat.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\AfDaq.fig&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\AfDaq.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\Arduino.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\CalculateResults.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\DefaultSettings.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\Help.fig&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\Help.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\InitializeGui.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\InitializeVariables.m&#39; &#39;C:\\Users\\Kulbhushan\\Documents\\My-Projects\\AfDaq\\NumberOfActiveChannels.m&#39; "],["functions-and-variables.html", "Chapter 4 Functions and variables 4.1 Functions 4.2 Variables", " Chapter 4 Functions and variables 4.1 Functions The following list of functions is available. Each of these functions is placed in individual .m files (See brief description in Table 3.1). Additionally, the AfDaq.m file includes different callback functions associated with different sub-components of the GUI. These are self-explanatory with a brief explanation given in the function file itself. Table 4.1: List of available functions SYNTAX AcqRunningGuiFormat(handles) AcqStoppedGuiFormat(handles) varargout = AfDaq(varargin) Arduino(handles,string) CalculateResults(handles) DefaultSettings(handles) varargout = Help(varargin) InitializeGui(eventdata,handles) InitializeVariables(handles) numberOfActiveChannels = NumberOfActiveChannels(handles) 4.2 Variables The following variables are available in 3 categories. The variable names are self-explanatory. Table 4.2: List of available variables Settings Data Flags settings_daqDateTime data_timeStampsRaw flags_isDataScaling settings_sessionDate data_timeStampsMsec flags_isChannel1Running settings_sessionTime data_rawDataChannel1 flags_isChannel2Running settings_customId data_rawDataChannel2 flags_isChannel3Running settings_sessionId data_rawDataChannel3 flags_isChannel4Running settings_sessionDuration data_rawDataChannel4 flags_isChannel5Running settings_samplingFrequency data_rawDataChannel5 settings_samplingTimeInterval data_scaledDataChannel1 setting_scrollPlotWidth data_recordedSessionDuration settings_rightOffset data_recordedSamplingFrequency settings_scalingFunction data_recordedNumberOfSamples settings_numberOfSamples data_dataQuality settings_numberOfActiveChannels data_sampleNumber settings_channel1Type settings_channel1Pin settings_channel2Type settings_channel2Pin settings_channel3Type settings_channel3Pin settings_channel4Type settings_channel4Pin settings_channel5Type settings_channel5Pin settings_yMinValue settings_yMaxValue settings_statusMsg "],["usage.html", "Chapter 5 Usage", " Chapter 5 Usage To be filled "],["roadmap.html", "Chapter 6 Roadmap", " Chapter 6 Roadmap See the open issues for a list of proposed features (and known issues). "],["changelog.html", "Chapter 7 Changelog", " Chapter 7 Changelog You can check all the releases on the GitHub release page. 1.0.0 2021-04-20 This is the first stable release and was used in the academic paper submitted for peer review. "],["contribute.html", "Chapter 8 Contributing 8.1 How to contribute? 8.2 Code of Conduct", " Chapter 8 Contributing 8.1 How to contribute? Any contributions you make are greatly appreciated. You can contribute to this project in the following ways. Add new functionality If you would like to add some new functionality/features to the project, feel free to fork the project. If you are satisfied with your modification and would like to commit the changes to this project, you can follow the easy steps below - Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request Review code You can review the source code at GitHub repository. Your expert scrutiny may give us directions for any code optimization. You can propose your changes via GitHub issue. Raise issues about bugs/features/doubts In case you found any bugs, want any new feature, or have any questions regarding the project, feel free to file a GitHub issue for the same. Proof-read the documentation Despite our best efforts, there may be some typos, grammatical errors, and missing information in the documentation. You can use raise a GitHub issue for any changes sought. Cite if used in a publication You can also cite this project if you are using it for your work. See Citation for more information. Star on GitHub You can help increase the visibility of this project by starring the GitHub repository. Share with others You can greatly help the reach by sharing this project links with others on social media. You can also review the project on your blog or social media post. 8.2 Code of Conduct Please note that this project is released with a Contributor Code of Conduct. By contributing to this project you agree to abide by its terms. "],["references.html", "References", " References "]]
